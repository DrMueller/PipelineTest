name: 1.0$(rev:.r) # build numbering format

trigger:
  batch: true # batch changes if true; start a new build for every push if false (default)
  branches:
    include:
      - refs/heads/master

variables:
  BuildConfiguration: "Release"
  SourcesPath: "Sources/**/*.csproj"
  SolutionPath: "ConsoleApp1.sln"
  TestsPath: "Sources/Testing/**/*Tests.csproj"

jobs:
  - job: "BuildAndTest"
    displayName: "Build and test"
    pool:
      name: Azure Pipelines
      vmImage: ubuntu-latest
    steps:
      - task: DotNetCoreCLI@2
        displayName: "Restore"
        inputs:
          command: restore
          projects: $(SourcesPath)
      - task: DrMueller2.NuGetVulnerabilityScan.NugetVulnerabilityScanTask.NugetVulnerabilityScanTask@1
        displayName: NuGet Vulnerability Scan
        inputs:
          projectPath: "**/*.csproj"
      - task: DotNetCoreCLI@2
        displayName: "Build with warnings as errors"
        inputs:
          projects: '$(SourcesPath)'
          arguments: '/p:TreatWarningsAsErrors="true" --configuration $(BuildConfiguration)'
      # - task: Docker@2
      #   displayName: "Start SQL Server Container"
      #   inputs:
      #     containerRegistry: DockerHub
      #     command: run
      #     arguments: '-e "ACCEPT_EULA=Y" -e "SA_PASSWORD=sTronkpassword54322!" -p 1437:1433 --name SQLServer2017 -d mcr.microsoft.com/mssql/server:2017-latest'
      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs:
          command: test
          projects: $(TestsPath)
          arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'

      - task: PublishCodeCoverageResults@2
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

      - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@10
        displayName: 'Check build quality'
        inputs:
          checkCoverage: true
          forceCoverageImprovement: true
          ignoreDecreaseAboveUpperThreshold: false

      - task: petersendev.dotnet-global-tool-installer.DotnetGlobalToolInstaller.DotnetGlobalToolInstaller@0
        displayName: '.NET Core Global Tool'
        inputs:
          name: nugetlicencebuddy
          
      - script: 'nugetlicencebuddy -i -s Sources'
        displayName: 'Run Licence Buddy'

  - job: "RunResharper"
    displayName: "Run ReSharper analysis"
    pool:
      name: Azure Pipelines
      vmImage: windows-latest
    steps:
    - task: petersendev.dotnet-global-tool-installer.DotnetGlobalToolInstaller.DotnetGlobalToolInstaller@0
      displayName: '.NET Core Global Tool'
      inputs:
        name: jetbrains.resharper.globaltools

    - task: DrMueller2.ReSharperRunner.ReSharperRunnerTask.ReSharperRunnerTask@2
      displayName: ReSharperRunnerTask
      inputs:
        solutionPath: $(SolutionPath)

